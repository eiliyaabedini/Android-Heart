package de.lizsoft.heart.testhelper.navigator

import android.app.Activity
import android.app.PendingIntent
import android.content.Intent
import android.view.View
import com.nhaarman.mockitokotlin2.mock
import de.lizsoft.heart.interfaces.navigator.ActivityLauncherOpen
import io.reactivex.Maybe
import java.io.Serializable

class ActivityLauncherOpenTest : ActivityLauncherOpen {
    private var closeOtherActivitiesCalled: Boolean = false
    private var addArgumentCalled: Serializable? = null
    private var addTransitionViewCalled: Triple<Activity, View, String>? = null
    private var addTheOnlyParentCalled: Class<*>? = null
    private var getPendingIntentCalled: Boolean = false
    private var getIntentCalled: Boolean = false
    private var startActivityCalled: Boolean = false
    private var startActivityForResultCalled: Boolean = false

    private var activityResult: Maybe<Serializable> = Maybe.empty()

    fun test(): ActivityLauncherOpenTestModel {
        return ActivityLauncherOpenTestModel(
              closeOtherActivitiesCalled,
              addArgumentCalled,
              addTransitionViewCalled,
              addTheOnlyParentCalled,
              getPendingIntentCalled,
              getIntentCalled,
              startActivityCalled,
              startActivityForResultCalled
        )
    }

    override fun closeOtherActivities(): ActivityLauncherOpen {
        closeOtherActivitiesCalled = true

        return this
    }

    override fun <T : Serializable> addArgument(argument: T): ActivityLauncherOpen {
        addArgumentCalled = argument

        return this
    }

    override fun addTransitionView(currentActivity: Activity, view: View, sharedElementName: String): ActivityLauncherOpen {
        addTransitionViewCalled = Triple(currentActivity, view, sharedElementName)

        return this
    }

    override fun addTheOnlyParent(parent: Class<*>): ActivityLauncherOpen {
        addTheOnlyParentCalled = parent

        return this
    }

    override fun getPendingIntent(): PendingIntent {
        getPendingIntentCalled = true

        return mock()
    }

    override fun getIntent(): Intent {
        getIntentCalled = true

        return mock()
    }

    override fun startActivity() {
        startActivityCalled = true
    }

    override fun startActivityForResult(): Maybe<Serializable> {
        startActivityForResultCalled = true

        return activityResult
    }

    fun setActivityResult(activityResult: Maybe<Serializable>) {
        this.activityResult = activityResult
    }
}
